// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	domain "github.com/redblood-pixel/learning-service-go/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
	isgomock struct{}
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockUsers) Refresh(user domain.RefreshInput) (domain.TokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", user)
	ret0, _ := ret[0].(domain.TokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockUsersMockRecorder) Refresh(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockUsers)(nil).Refresh), user)
}

// SignIn mocks base method.
func (m *MockUsers) SignIn(user domain.SigninInput) (domain.TokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(domain.TokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsersMockRecorder) SignIn(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsers)(nil).SignIn), user)
}

// SignUp mocks base method.
func (m *MockUsers) SignUp(user domain.SignupInput) (domain.TokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(domain.TokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsersMockRecorder) SignUp(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsers)(nil).SignUp), user)
}

// MockDictionary is a mock of Dictionary interface.
type MockDictionary struct {
	ctrl     *gomock.Controller
	recorder *MockDictionaryMockRecorder
	isgomock struct{}
}

// MockDictionaryMockRecorder is the mock recorder for MockDictionary.
type MockDictionaryMockRecorder struct {
	mock *MockDictionary
}

// NewMockDictionary creates a new mock instance.
func NewMockDictionary(ctrl *gomock.Controller) *MockDictionary {
	mock := &MockDictionary{ctrl: ctrl}
	mock.recorder = &MockDictionaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictionary) EXPECT() *MockDictionaryMockRecorder {
	return m.recorder
}

// CreateWord mocks base method.
func (m *MockDictionary) CreateWord(word domain.CreateWordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWord", word)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWord indicates an expected call of CreateWord.
func (mr *MockDictionaryMockRecorder) CreateWord(word any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWord", reflect.TypeOf((*MockDictionary)(nil).CreateWord), word)
}

// DeleteWord mocks base method.
func (m *MockDictionary) DeleteWord(wordId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWord", wordId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWord indicates an expected call of DeleteWord.
func (mr *MockDictionaryMockRecorder) DeleteWord(wordId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWord", reflect.TypeOf((*MockDictionary)(nil).DeleteWord), wordId)
}

// GetAllWords mocks base method.
func (m *MockDictionary) GetAllWords() []domain.Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWords")
	ret0, _ := ret[0].([]domain.Word)
	return ret0
}

// GetAllWords indicates an expected call of GetAllWords.
func (mr *MockDictionaryMockRecorder) GetAllWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWords", reflect.TypeOf((*MockDictionary)(nil).GetAllWords))
}

// GetWord mocks base method.
func (m *MockDictionary) GetWord(id int) (domain.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWord", id)
	ret0, _ := ret[0].(domain.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWord indicates an expected call of GetWord.
func (mr *MockDictionaryMockRecorder) GetWord(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWord", reflect.TypeOf((*MockDictionary)(nil).GetWord), id)
}

// UpdateWord mocks base method.
func (m *MockDictionary) UpdateWord(word domain.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWord", word)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWord indicates an expected call of UpdateWord.
func (mr *MockDictionaryMockRecorder) UpdateWord(word any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWord", reflect.TypeOf((*MockDictionary)(nil).UpdateWord), word)
}

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
	isgomock struct{}
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroup) CreateGroup(arg0 domain.CreateGroupRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupMockRecorder) CreateGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroup)(nil).CreateGroup), arg0)
}

// DeleteGroup mocks base method.
func (m *MockGroup) DeleteGroup(groupID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupMockRecorder) DeleteGroup(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroup)(nil).DeleteGroup), groupID)
}

// GetAllGroups mocks base method.
func (m *MockGroup) GetAllGroups() []domain.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]domain.Group)
	return ret0
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockGroupMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroup)(nil).GetAllGroups))
}

// GetGroup mocks base method.
func (m *MockGroup) GetGroup(groupID int) (domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", groupID)
	ret0, _ := ret[0].(domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGroupMockRecorder) GetGroup(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroup)(nil).GetGroup), groupID)
}

// GetGroupsOfUser mocks base method.
func (m *MockGroup) GetGroupsOfUser(userID int) ([]domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOfUser", userID)
	ret0, _ := ret[0].([]domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsOfUser indicates an expected call of GetGroupsOfUser.
func (mr *MockGroupMockRecorder) GetGroupsOfUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOfUser", reflect.TypeOf((*MockGroup)(nil).GetGroupsOfUser), userID)
}

// GetWordsInGroup mocks base method.
func (m *MockGroup) GetWordsInGroup(groupID int) ([]domain.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordsInGroup", groupID)
	ret0, _ := ret[0].([]domain.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordsInGroup indicates an expected call of GetWordsInGroup.
func (mr *MockGroupMockRecorder) GetWordsInGroup(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordsInGroup", reflect.TypeOf((*MockGroup)(nil).GetWordsInGroup), groupID)
}

// UpdateGroup mocks base method.
func (m *MockGroup) UpdateGroup(group domain.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupMockRecorder) UpdateGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroup)(nil).UpdateGroup), group)
}
